/*
Copyright 2019 The Skaffold Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package deploy

import (
	"context"
	"io"
	"os/exec"

	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/build"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/constants"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/deploy/kubectl"
	runcontext "github.com/GoogleContainerTools/skaffold/pkg/skaffold/runner/context"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/util"
	"github.com/pkg/errors"
)

// DockerComposeDeployer deploys workflows using DockerCompose CLI.
type DockerComposeDeployer struct {
	kubectl            kubectl.CLI
	defaultRepo        string
	insecureRegistries map[string]bool
}

func NewDockerComposeDeployer(runCtx *runcontext.RunContext) *DockerComposeDeployer {
	return &DockerComposeDeployer{
		kubectl: kubectl.CLI{
			Namespace:   runCtx.Opts.Namespace,
			KubeContext: runCtx.KubeContext,
			ForceDeploy: runCtx.Opts.ForceDeploy(),
		},
		defaultRepo:        runCtx.DefaultRepo,
		insecureRegistries: runCtx.InsecureRegistries,
	}
}

// Labels returns the labels specific to DockerCompose.
func (k *DockerComposeDeployer) Labels() map[string]string {
	return map[string]string{
		constants.Labels.Deployer: "DockerCompose",
	}
}

// Deploy runs `kubectl apply` on the manifest generated by DockerCompose.
func (k *DockerComposeDeployer) Deploy(ctx context.Context, out io.Writer, builds []build.Artifact, labellers []Labeller) error {
	cmd := exec.Command("docker-compose", "up")
	output, err := util.RunCmdOut(cmd)
	if err != nil {
		return errors.Wrapf(err, "running docker-compose up: %v \n %s", err, string(output))
	}
	return nil
}

func (k *DockerComposeDeployer) Dependencies() ([]string, error) {
	return []string{"docker-compose.yaml"}, nil
}

func (k *DockerComposeDeployer) Cleanup(ctx context.Context, out io.Writer) error {
	return nil
}
