/*
Copyright 2019 The Skaffold Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package deploy

import (
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/pkg/errors"
	yaml "gopkg.in/yaml.v2"

	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/build"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/color"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/constants"
	deploy "github.com/GoogleContainerTools/skaffold/pkg/skaffold/deploy/kubectl"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/event"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/kubectl"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/runner/runcontext"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/schema/latest"
	"github.com/GoogleContainerTools/skaffold/pkg/skaffold/util"
)

// kustomization is the content of a kustomization.yaml file.
type kustomization struct {
	Bases                 []string             `yaml:"bases"`
	Resources             []string             `yaml:"resources"`
	Patches               []string             `yaml:"patches"`
	PatchesStrategicMerge []string             `yaml:"patchesStrategicMerge"`
	CRDs                  []string             `yaml:"crds"`
	PatchesJSON6902       []patchJSON6902      `yaml:"patchesJson6902"`
	ConfigMapGenerator    []configMapGenerator `yaml:"configMapGenerator"`
	SecretGenerator       []secretGenerator    `yaml:"secretGenerator"`
}

type patchJSON6902 struct {
	Path string `yaml:"path"`
}

type configMapGenerator struct {
	Files []string `yaml:"files"`
}

type secretGenerator struct {
	Files []string `yaml:"files"`
}

// KustomizeDeployer deploys workflows using kustomize CLI.
type KustomizeDeployer struct {
	*latest.KustomizeDeploy

	kubectl            deploy.CLI
	defaultRepo        string
	insecureRegistries map[string]bool
}

func NewKustomizeDeployer(runCtx *runcontext.RunContext) *KustomizeDeployer {
	return &KustomizeDeployer{
		KustomizeDeploy: runCtx.Cfg.Deploy.KustomizeDeploy,
		kubectl: deploy.CLI{
			CLI:         kubectl.NewFromRunContext(runCtx),
			Flags:       runCtx.Cfg.Deploy.KustomizeDeploy.Flags,
			ForceDeploy: runCtx.Opts.ForceDeploy(),
		},
		defaultRepo:        runCtx.DefaultRepo,
		insecureRegistries: runCtx.InsecureRegistries,
	}
}

// Labels returns the labels specific to kustomize.
func (k *KustomizeDeployer) Labels() map[string]string {
	return map[string]string{
		constants.Labels.Deployer: "kustomize",
	}
}

// Deploy runs `kubectl apply` on the manifest generated by kustomize.
func (k *KustomizeDeployer) Deploy(ctx context.Context, out io.Writer, builds []build.Artifact, labellers []Labeller) *Result {
	color.Default.Fprintln(out, "kubectl client version:", k.kubectl.Version(ctx))
	if err := k.kubectl.CheckVersion(ctx); err != nil {
		color.Default.Fprintln(out, err)
	}

	manifests, err := k.readManifests(ctx)
	if err != nil {
		event.DeployFailed(err)
		return NewDeployErrorResult(errors.Wrap(err, "reading manifests"))
	}

	if len(manifests) == 0 {
		return NewDeploySuccessResult(nil)
	}

	event.DeployInProgress()

	namespaces, err := manifests.CollectNamespaces()
	if err != nil {
		event.DeployInfoEvent(errors.Wrap(err, "could not fetch deployed resource namespace."+
			"This might cause port-forward and deploy health-check to fail."))
	}
	manifests, err = manifests.ReplaceImages(builds, k.defaultRepo)
	if err != nil {
		event.DeployFailed(err)
		return NewDeployErrorResult(errors.Wrap(err, "replacing images in manifests"))
	}

	manifests, err = manifests.SetLabels(merge(labellers...))
	if err != nil {
		event.DeployFailed(err)
		return NewDeployErrorResult(errors.Wrap(err, "setting labels in manifests"))
	}

	for _, transform := range manifestTransforms {
		manifests, err = transform(manifests, builds, k.insecureRegistries)
		if err != nil {
			event.DeployFailed(err)
			return NewDeployErrorResult(errors.Wrap(err, "unable to transform manifests"))
		}
	}

	if err := k.kubectl.Apply(ctx, out, manifests); err != nil {
		event.DeployFailed(err)
		return NewDeployErrorResult(errors.Wrap(err, "kubectl error"))
	}

	event.DeployComplete()
	return NewDeploySuccessResult(namespaces)
}

// Cleanup deletes what was deployed by calling Deploy.
func (k *KustomizeDeployer) Cleanup(ctx context.Context, out io.Writer) error {
	manifests, err := k.readManifests(ctx)
	if err != nil {
		return errors.Wrap(err, "reading manifests")
	}

	if err := k.kubectl.Delete(ctx, out, manifests); err != nil {
		return errors.Wrap(err, "delete")
	}

	return nil
}

// Dependencies lists all the files that can change what needs to be deployed.
func (k *KustomizeDeployer) Dependencies() ([]string, error) {
	return dependenciesForKustomization(k.KustomizePath)
}

func dependenciesForKustomization(dir string) ([]string, error) {
	var deps []string

	path, err := findKustomizationConfig(dir)
	if err != nil {
		// No kustomiization config found so assume it's remote and stop traversing
		return deps, nil
	}

	buf, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, err
	}

	content := kustomization{}
	if err := yaml.Unmarshal(buf, &content); err != nil {
		return nil, err
	}

	deps = append(deps, path)

	candidates := append(content.Bases, content.Resources...)

	for _, candidate := range candidates {
		// If the file  doesn't exist locally, we can assume it's a remote file and
		// skip it, since we can't monitor remote files. Kustomize itself will
		// handle invalid/missing files.
		local, mode := pathExistsLocally(candidate, dir)
		if !local {
			continue
		}

		if mode.IsDir() {
			candidateDeps, err := dependenciesForKustomization(filepath.Join(dir, candidate))
			if err != nil {
				return nil, err
			}
			deps = append(deps, candidateDeps...)
		} else {
			deps = append(deps, filepath.Join(dir, candidate))
		}
	}

	deps = append(deps, util.AbsolutePaths(dir, content.Patches)...)
	deps = append(deps, util.AbsolutePaths(dir, content.PatchesStrategicMerge)...)
	deps = append(deps, util.AbsolutePaths(dir, content.CRDs)...)
	for _, patch := range content.PatchesJSON6902 {
		deps = append(deps, filepath.Join(dir, patch.Path))
	}
	for _, generator := range content.ConfigMapGenerator {
		deps = append(deps, util.AbsolutePaths(dir, generator.Files)...)
	}
	for _, generator := range content.SecretGenerator {
		deps = append(deps, util.AbsolutePaths(dir, generator.Files)...)
	}

	return deps, nil
}

// A Kustomization config must be at the root of the directory. Kustomize will
// error if more than one of these files exists so order doesn't matter.
func findKustomizationConfig(dir string) (string, error) {
	candidates := []string{"kustomization.yaml", "kustomization.yml", "Kustomization"}
	for _, candidate := range candidates {
		if local, _ := pathExistsLocally(candidate, dir); local {
			return filepath.Join(dir, candidate), nil
		}
	}
	return "", fmt.Errorf("no Kustomization configuration found in directory: %s", dir)
}

func pathExistsLocally(filename string, workingDir string) (bool, os.FileMode) {
	path := filename
	if !filepath.IsAbs(filename) {
		path = filepath.Join(workingDir, filename)
	}
	if f, err := os.Stat(path); err == nil {
		return true, f.Mode()
	}
	return false, 0
}

func (k *KustomizeDeployer) readManifests(ctx context.Context) (deploy.ManifestList, error) {
	cmd := exec.CommandContext(ctx, "kustomize", "build", k.KustomizePath)
	out, err := util.RunCmdOut(cmd)
	if err != nil {
		return nil, errors.Wrap(err, "kustomize build")
	}

	if len(out) == 0 {
		return nil, nil
	}

	var manifests deploy.ManifestList
	manifests.Append(out)
	return manifests, nil
}
